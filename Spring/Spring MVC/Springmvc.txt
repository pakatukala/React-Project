How Spring MVC works
	--Incoming request from the browser then the front controller(part of spring framework) delegates request to the controller is the java File based on the URL specific model is called  
	Model might be a information can be received from DB or some computational work
	Front controller along with the information then pass information to the view file and view display accordingly 
	finally the control will go to front controller will response to the web browser

		Controller - 
			-- Dispatcher Servlet 


Steps required for spring MVC concept
	
	The most inital part updatig the web.xml files
		-- we need to configure the dispatcher servlet
		--Configure the URL mappig
	Secondly, Configure the spring web configuration file
		--Add support for component Scan
		--Configure View Resolver

	Create a View files and call the view files using controller


Model (MVC)
	-- Transferring the model to the front controller or its a container and will be read by the View file


	<!-- <p>Gender:
	Male<form:radiobutton path="gender" value ="Male"/>
	Female<form:radiobutton path="gender" value = "Female"/>
	</p> -->

	index.jsp
	Gender : <form:radiobuttons path="gender" items = "${gender}"/>

HelloController

		@RequestMapping("/")
	public ModelAndView homepage() {
		ModelAndView model = new ModelAndView("index","info", new Information());
		Map<String, String> gender = new HashMap<String, String>();
		gender.put("Male", "Male");
		gender.put("Female", "Female");
		model.addObject("gender", gender);
		return model;
	}


The 3 Approaches 
	--ModelAndView Approach it allows contrllers return both as a single value its legacy method
	--Model -- it is an interface
	--ModelandMap it is a class which contain methods like addAtributes

For Validations we have to use the particular jars

	1. Hibernate Validator
	2. Hibernate 4.1
	3. Log4j
	4. Javax.validation 
	5. slf4j-simple-1.7.5
	6. slf4j-api


@Size(min = 5, max = 6)
@Valid 

To use these we have to mention all the jars 

import javax.validation.constraints.Size;

public class Information {
	@Size(min = 5, max = 6)
	private String firstName;
	private String lastName, gender, country;
	public String getGender() {
		return gender;
	}
	public void setGender(String gender) {
		this.gender = gender;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}
	public String getLastName() {
		return lastName;
	}
	public void setLastName(String lastName) {
		this.lastName = lastName;
	}
	public String getCountry() {
		return country;
	}
	public void setCountry(String country) {
		this.country = country;
	}
	
	
}

package org.studyeasy.spring;


import java.util.HashMap;
import java.util.Map;

import javax.validation.Valid;

import org.springframework.stereotype.Controller;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.servlet.ModelAndView;

@Controller
public class HelloController {
	@RequestMapping("/hello")
	public ModelAndView helloWorld(@Valid Information userInfo, BindingResult result) {
		ModelAndView model = new ModelAndView("hello");
		model.addObject("firstName", userInfo.getFirstName());
		model.addObject("lastName", userInfo.getLastName());
		model.addObject("gender", userInfo.getGender());
		model.addObject("country", userInfo.getCountry());
		if(result.hasErrors()) { // If this has erros in @Size then @Valid will throws errors
			System.out.println("Has Errors");
		}else {
			System.out.println("Good to go");
		}
		return model;
	}
	
	@RequestMapping("/")
	public ModelAndView homepage() {
		ModelAndView model = new ModelAndView("index","info", new Information());
		Map<String, String> gender = new HashMap<String, String>();
		Map<String, String> country = new HashMap<String, String>();
		gender.put("Male", "Male");
		gender.put("Female", "Female");
		country.put("India", "India");
		country.put("Usa", "Usa");
		model.addObject("gender", gender);
		model.addObject("country", country);
		return model;
		
	}
}

BindingResult result will collect all the information and will validate for errors

Repopulating form data

How we connect to the DB using spring framework
	--Web browser -> security layer -> controller -> service layer -> DAO -> DB
	--Security layer Authentication and authorization Establishing the correct user 
	-- Controller where we implement the bussines logic 
	-- Service Layer should call the DAO methods to perform operations
	Service and Security layers are optional layers

Methods of Mapping 
	--Option 1 XML Mapping legacy way 
	--Annotation (Modren Preffered way)
	

How to create a project in Spring MVC to get the output from DB using JSP

first of all we have to create a Model 

Let us consider org.study.spring.model

	-- User.java -> in this you have to declare all the values that are in the database
					Now create a constructor and get setters

Now create DAO layer to access the DB 
	--Now create an Interface which have the list of the users 

	AppDAO.java its an interfave 
		-- public List<User> listUser();

	Now we have to implement the unimplemented methods declared in interface 

Now create a class with the Imple which implements the interface 
	
 AppDAOImpl.java

 	public class AppDAOImpl implements AppDAO{
 		public DataSource dataSource;

 		public AppDAOImpl(DataSource dataSource){
 			this.dataSource = dataSource;
 		}

 	 	public List<User> listUser(){
 	 	String SQL = "select * from files";
 	 	Connection conn = null;
 	 	List<User> listUser = new ArrayList<User>();
 	 	try{
 	 	conn = dataSource.getConnection();
 	 	PreparedStatement ps = new PreparedStatement(SQL);
 	 	ResultSet rs = ps.executeQuery();
 	 	while(rs.next(){
 	 	User temp = new User(rs.getInt(id) .......)
 	 	});
 	 	listUser.add(temp);
 	 	}
 	 	return null;
 	 	}
 	}


 Now create a Spring-AppDAO.xml 

 now in this XML file you need to add all the dataSource bean 
 Now you have to create a bean in the XML for the costructor for the dataSource.

 